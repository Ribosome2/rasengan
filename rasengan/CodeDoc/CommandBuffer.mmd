Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# CommandBuffer

## 不能直接创建，需要从CommandPool创建

## level参数指定要分配的CommandBuffer 是一级（primary\) 还是二级（secondary

### 一级

#### 可以直接提交到队列执行，但是不能被其他的comandBuffer调用

### 二级

#### 不能直接提交到队列，但是可以被其它的一级command buffer 调用

## Recording
> collapsed=`true`,leftSide=`true`


### 开始录制的选项
> collapsed=`true`


#### flag
> collapsed=`true`


##### 执行完立刻就重新录制

##### 表示二级command buffer ,完全在单个renderPass里
> leftSide=`true`


##### 在即将被执行的时候也可以重新提交
> leftSide=`true`


#### 指定RenderPass的beginInfo
> collapsed=`true`


##### 指定swapchain的FrameBuffer

##### 指定extent
> leftSide=`true`


##### 指定clearColor
> leftSide=`true`


#### Command的同步机制
> collapsed=`true`


##### 用来实现同步的对象
> collapsed=`true`


###### Semaphores
> collapsed=`true`


####### 只有两种状态
> collapsed=`true`


######## unsignaled

######## signaled
> leftSide=`true`


####### 开始的时候是unsignal

####### 不会阻塞Host执行

###### Fence
> collapsed=`true`,leftSide=`true`


####### 会阻塞Host的执行

###### 两者的区别：
> collapsed=`true`


####### Samaphore控制GPU的执行顺序

####### Fence用于控制CPU和GPU两者之间的同步
> leftSide=`true`


####### Fence必须手动重置回unsignaled状态

###### 怎么选用哪个
