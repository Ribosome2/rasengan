Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# VertexBuffer

## 怎么创建\(不用Staging\)

### vkCreateBuffer 先创建一个 VkBuffer  这个时候 buffer还是没有数据的

### 根据创建buffer 时指定的属性，查询这个buffer需要的 VkMemoryRequirements

###  vkAllocateMemory 分配内存

#### memoryTypeIndex 需要根据上面的 VkMemoryRequirements 向Device查询对应的内存类型在设备上的index

### vkBindBufferMemory 把VkBuffer和VkDeviceMemory进行绑定

### vkMapMemory 取 vkDeviceMemory的内存指针到临时变量 \*data

### memcpy 把顶点数据复制到 \*data 这时候vkDeviceMemory就有了GPU所要的顶点数据

### vkUnmapMemory 

## 两种对象组成
> collapsed=`true`,leftSide=`true`


### VkBuffer

### VkDeviceMemory
> leftSide=`true`


## 怎么运行时更新
> collapsed=`true`,leftSide=`true`


### vkMapMemory

### memcpy

### vkUnmapMemory

### 按照上面3个步骤，就跟创建VertexBuffer的时候一样
> leftSide=`true`


## StagingBuffer

### VK\_MEMORY\_PROPERTY\_DEVICE\_LOCAL\_BIT 

#### 一般就意味着不能在CPU访问

### TransformQueue

#### 需要QueueFamily支持 transform操作，，也就是VK\_QUEUE\_TRANSFER\_BIT

### 创建过程

#### VK\_BUFFER\_USAGE\_TRANSFER\_SRC\_BIT 创建有一个stagingBuffer 和stagingMemory

#### 把顶点数据先map到stagingMemory

#### 再创建一个 VK\_BUFFER\_USAGE\_TRANSFER\_DST\_BIT 的目标buffer作为vertexBuffer

#### 通过vkCmdCopyBuffer 把stagingBuffer的数据复制到目标buffer
